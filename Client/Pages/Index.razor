@page "/"
@using BiorhythmFun.Client.Shared

<MatAppBarContainer>
    <MatAppBar Fixed="true">
        <MatAppBarRow>
            <MatAppBarSection>
                <MatAppBarTitle>Biorhythm Fun</MatAppBarTitle>
            </MatAppBarSection>
            <MatAppBarSection Align="@MatAppBarSectionAlign.End">
                <MatIconButton title="Prepend Month" Icon="exit_to_app" OnClick="DoPrevious" Style="transform: rotate(180deg)" />
                <MatIconButton title="Change Plot Date" Icon="insert_invitation" OnClick="DoChangeChartDate" />
                <MatIconButton title="Append Month" Icon="exit_to_app" OnClick="DoNext" />
                <MatIconButton title="Sort by Age" Icon="forward" Style="@($"transform: rotate({(OldestFirst ? "90" : "270")}deg)")" OnClick="DoSortByAge" />
                <MatIconButton title="Add Person" Icon="library_add" OnClick="DoAddPerson" />
                <MatIconButton title="Read FAQ" Icon="import_contacts" OnClick="DoShowFAQ" />
            </MatAppBarSection>
        </MatAppBarRow>
    </MatAppBar>

    <MatAppBarContent Class="Content">
        <MatDialog IsOpen="@AddPersonDialogIsOpen">
            <MatDialogTitle>Add Chart</MatDialogTitle>
            <MatDialogContent>
                <MatTextField @bind-Value="@AddName" Required="true" Label="Name" Style="display: block"></MatTextField>
                <MatDatePicker @bind-Value="@AddBirthdate" Required="true" Label="Birth Date"></MatDatePicker>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="@(e => DoAdd(e))">OK</MatButton>
                <MatButton OnClick="@(e => { AddPersonDialogIsOpen = false; })">Cancel</MatButton>
            </MatDialogActions>
        </MatDialog>

        <MatDialog IsOpen="@EditPersonDialogIsOpen">
            <MatDialogTitle>Edit Chart</MatDialogTitle>
            <MatDialogContent>
                <MatTextField @bind-Value="@EditName" Required="true" Label="Name" Style="display: block"></MatTextField>
                <MatDatePicker @bind-Value="@EditBirthdate" Required="true" Label="Birth Date"></MatDatePicker>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="DoEdit">OK</MatButton>
                <MatButton OnClick="@(e => { EditPersonDialogIsOpen = false; })">Cancel</MatButton>
            </MatDialogActions>
        </MatDialog>

        <MatDialog IsOpen="@DeletePersonDialogIsOpen">
            <MatDialogTitle>Delete Chart</MatDialogTitle>
            <MatDialogContent>
                Are you sure you want to delete chart for '@DeletePerson?.Name'?
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="DoDelete">OK</MatButton>
                <MatButton OnClick="@(e => { DeletePersonDialogIsOpen = false; })">Cancel</MatButton>
            </MatDialogActions>
        </MatDialog>

        <MatDialog IsOpen="@ChangeChartdateDialogIsOpen">
            <MatDialogTitle>Change Chart Date</MatDialogTitle>
            <MatDialogContent>
                <MatDatePicker @bind-Value="@Chartdate" Required="true" Label="Chart Date"></MatDatePicker>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="DoChange">OK</MatButton>
                <MatButton OnClick="@(e => { ChangeChartdateDialogIsOpen = false; })">Cancel</MatButton>
            </MatDialogActions>
        </MatDialog>

        @if (FAQIsOpen)
        {
            <div class="FAQContainer">
                <FAQStatic />
            </div>
        }

        <MatListGroup>
            <MatListGroupSubHeader Class="TabGroupHeader">People</MatListGroupSubHeader>
            <MatList SingleSelection="true">
                @foreach (var person in ChartSet.People)
                {
                    <MatListItem Class="Person" OnClick="@(e => ShowChart(person))">
                        <MatIcon Icon="@MatIconNames.Person" /> @person.Name
                    </MatListItem>
                }
            </MatList>
            <MatListGroupSubHeader Class="TabGroupHeader">Groups</MatListGroupSubHeader>
            <MatList SingleSelection="true">
                @foreach (var group in ChartSet.Groups)
                {
                    <MatListItem Class="Group" OnClick="@(e => ShowChart(group))">
                        <MatIcon Icon="@MatIconNames.Group" /> @group.Name
                    </MatListItem>
                }
            </MatList>
            <MatListGroupSubHeader Class="TabGroupHeader">Compatibility</MatListGroupSubHeader>
            <MatList SingleSelection="true">
                @foreach (var compat in ChartSet.CompatibilityCharts)
                {
                    <MatListItem Class="Compatibility" OnClick="@(e => ShowChart(compat))">
                        <MatIcon Icon="@MatIconNames.Compare" /> @compat.Name
                    </MatListItem>
                }
            </MatList>
            <MatListGroupSubHeader Class="TabGroupHeader">Prediction</MatListGroupSubHeader>
            <MatList SingleSelection="true">
                @foreach (var predict in ChartSet.PredictionCharts)
                {
                    <MatListItem Class="Prediction" OnClick="@(e => ShowChart(predict))">
                        <MatIcon Icon="@MatIconNames.Pregnant_woman" /> @predict.Name
                    </MatListItem>
                }
            </MatList>
        </MatListGroup>

        <div class="ChartContainer @(FAQIsOpen ? "ChartHalf" : "ChartFull")">
            @foreach (var chart in Current)
            {
                if (chart is Person person)
                {
                    <div>
                        <span style="display: inline-block; width: 200px">
                            @person.Name
                        </span>
                        <span style="display: inline-block; width: 300px">
                            @($"Born {person.Birthdate:dddd MMMM dd, yyyy}")
                        </span>
                        <span style="display: inline-block; transform: scale(.5)">
                            <MatIconButton title="Edit" Icon="edit" OnClick="@(e => DoEditPerson(person))" />
                            <MatIconButton title="Delete" Icon="delete" OnClick="@(e => DoDeletePerson(person))" />
                        </span>
                    </div>
                    <ChartBuilder Birthdate="@person.Birthdate" Startdate="@Startdate" Enddate="@Enddate" Height="200" />
                }
                else if (chart is Prediction prediction)
                {
                    var mother = ChartSet.GetPerson(prediction.MotherID);
                    var enddate1 = prediction.ConceptionDate.AddMonths(1);
                    var gestation = prediction.ConceptionDate.AddDays(280);
                    var enddate2 = gestation.AddMonths(1);
                    <div>
                        Baby's gender prediction for @mother.Name.
                        Mother's Birthdate @($"{mother.Birthdate:dddd MMMM dd, yyyy}").
                        Concieved @($"{prediction.ConceptionDate:dddd MMMM dd, yyyy}")
                    </div>
                    <div>
                        <ChartBuilder Birthdate="@mother.Birthdate" Startdate="@prediction.ConceptionDate" Enddate="@enddate1" Height="200" />
                    </div>
                    <div>
                        Baby's birth date prediction for @mother.Name.
                        Baby's birth date around @($"{gestation:dddd MMMM dd, yyyy}")
                    </div>
                    <div>
                        <ChartBuilder Birthdate="@mother.Birthdate" Startdate="@gestation" Enddate="@enddate2" Height="200" />
                    </div>
                }
                else if (chart is Compatibility compat)
                {
                    var p1 = ChartSet.GetPerson(compat.ID1);
                    var p2 = ChartSet.GetPerson(compat.ID2);
                    <div>
                        @compat.Name for @p1.Name and @p2.Name
                    </div>
                }
            }
        </div>
    </MatAppBarContent>
</MatAppBarContainer>