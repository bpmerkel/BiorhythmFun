@page "/"
@using BiorhythmFun.Client.Shared
@inject Blazored.LocalStorage.ILocalStorageService localStorage
<MatAppBarContainer>
    <MatAppBar Fixed="true">
        <MatAppBarRow>
            <MatAppBarSection>
                <MatAppBarTitle>Biorhythm Fun</MatAppBarTitle>
            </MatAppBarSection>
            <MatAppBarSection Align="@MatAppBarSectionAlign.End">
                <MatIconButton title="Prepend Month" Icon="exit_to_app" OnClick="DoPrevious" Style="transform: rotate(180deg)"></MatIconButton>
                <MatIconButton title="Append Month" Icon="exit_to_app" OnClick="DoNext"></MatIconButton>
                <MatIconButton title="Sort by Age" Icon="forward" Style="@($"transform: rotate({(OldestFirst ? "90" : "270")}deg)")" OnClick="DoSortByAge"></MatIconButton>
                <MatIconButton title="Change Plot Date" Icon="insert_invitation" OnClick="DoChangeChartDate"></MatIconButton>
                <MatIconButton title="Add Person" Icon="library_add" OnClick="DoAddPerson"></MatIconButton>
                <MatIconButton title="Read FAQ" Icon="import_contacts" OnClick="DoShowFAQ"></MatIconButton>
            </MatAppBarSection>
        </MatAppBarRow>
    </MatAppBar>

    <MatAppBarContent Class="Content">
        <MatDialog IsOpen="@AddPersonDialogIsOpen">
            <MatDialogTitle>Add Chart</MatDialogTitle>
            <MatDialogContent>
                <MatTextField @bind-Value="@AddName" Required="true" Label="Name" Style="display: block"></MatTextField>
                <MatDatePicker @bind-Value="@AddBirthdate" Required="true" Label="Birth Date"></MatDatePicker>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="DoAdd">OK</MatButton>
                <MatButton OnClick="@(e => { AddPersonDialogIsOpen = false; })">Cancel</MatButton>
            </MatDialogActions>
        </MatDialog>

        <MatDialog IsOpen="@EditPersonDialogIsOpen">
            <MatDialogTitle>Edit Chart</MatDialogTitle>
            <MatDialogContent>
                <MatTextField @bind-Value="@EditName" Required="true" Label="Name" Style="display: block"></MatTextField>
                <MatDatePicker @bind-Value="@EditBirthdate" Required="true" Label="Birth Date"></MatDatePicker>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="DoEdit">OK</MatButton>
                <MatButton OnClick="@(e => { EditPersonDialogIsOpen = false; })">Cancel</MatButton>
            </MatDialogActions>
        </MatDialog>

        <MatDialog IsOpen="@DeletePersonDialogIsOpen">
            <MatDialogTitle>Delete Chart</MatDialogTitle>
            <MatDialogContent>
                Are you sure you want to delete chart for '@DeletePerson?.Name'?
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="DoDelete">OK</MatButton>
                <MatButton OnClick="@(e => { DeletePersonDialogIsOpen = false; })">Cancel</MatButton>
            </MatDialogActions>
        </MatDialog>

        <MatDialog IsOpen="@ChangeChartdateDialogIsOpen">
            <MatDialogTitle>Change Chart Date</MatDialogTitle>
            <MatDialogContent>
                <MatDatePicker @bind-Value="@Chartdate" Required="true" Label="Chart Date"></MatDatePicker>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="DoChange">OK</MatButton>
                <MatButton OnClick="@(e => { ChangeChartdateDialogIsOpen = false; })">Cancel</MatButton>
            </MatDialogActions>
        </MatDialog>

        @if (FAQIsOpen)
        {
            <div class="FAQContainer">
                <FAQStatic />
            </div>
        }
        <div class="ChartContainer @(FAQIsOpen ? "ChartHalf" : "ChartFull")">
            @foreach (var person in People)
            {
                <div>
                    <span style="display: inline-block; width: 200px">
                        @person.Name
                    </span>
                    <span style="display: inline-block; width: 300px">
                        @($"Born {person.Birthdate:dddd MMMM dd, yyyy}")
                    </span>
                    <span style="display: inline-block; transform: scale(.5)">
                        <MatIconButton title="Edit" Icon="edit" OnClick="@(e => DoEditPerson(person))"></MatIconButton>
                        <MatIconButton title="Delete" Icon="delete" OnClick="@(e => DoDeletePerson(person))"></MatIconButton>
                    </span>
                </div>
                <ChartBuilder Birthdate="@person.Birthdate" Startdate="@Startdate" Enddate="@Enddate" Height="200"></ChartBuilder>
            }
        </div>
    </MatAppBarContent>
</MatAppBarContainer>

@code
{
    private bool AddPersonDialogIsOpen = false;
    private bool ChangeChartdateDialogIsOpen = false;
    private bool EditPersonDialogIsOpen = false;
    private bool DeletePersonDialogIsOpen = false;
    private string AddName = string.Empty;
    private DateTime AddBirthdate = DateTime.Today;
    private Person? EditPerson { get; set; }
    private string EditName = string.Empty;
    private DateTime EditBirthdate = DateTime.Today;
    private Person? DeletePerson { get; set; }
    private List<Person> People = new List<Person>();
    private DateTime Startdate { get; set; }
    private DateTime Enddate { get; set; }
    private DateTime Chartdate { get; set; }
    private bool OldestFirst { get; set; }
    private bool FAQIsOpen { get; set; }

    private void DoShowFAQ(MouseEventArgs e)
    {
        FAQIsOpen = !FAQIsOpen;
    }

    private void DoSortByAge(MouseEventArgs e)
    {
        // do an in-place ordering
        OldestFirst = !OldestFirst;
        SortAndSave();
    }

    private async void SortAndSave()
    {
        People.Sort((x, y) =>
        {
            var diff = x.Birthdate.CompareTo(y.Birthdate);
            return OldestFirst ? -diff : diff;
        });
        await localStorage.SetItemAsync("people", People);
    }

    private void DoAddPerson(MouseEventArgs e)
    {
        AddName = string.Empty;
        AddBirthdate = DateTime.Today;
        AddPersonDialogIsOpen = true;
    }

    private void DoAdd(MouseEventArgs e)
    {
        AddPersonDialogIsOpen = false;
        // save Name and Birthdate to localStorage
        if (!string.IsNullOrWhiteSpace(AddName))
        {
            People.Add(new Person { Name = AddName, Birthdate = AddBirthdate });
            SortAndSave();
        }
    }

    private void DoPrevious(MouseEventArgs e)
    {
        Startdate = Startdate.AddMonths(-1);
    }

    private void DoNext(MouseEventArgs e)
    {
        Enddate = Enddate.AddMonths(1);
    }

    private void DoChangeChartDate(MouseEventArgs e)
    {
        Chartdate = Startdate;
        ChangeChartdateDialogIsOpen = true;
    }

    private void DoChange(MouseEventArgs e)
    {
        ChangeChartdateDialogIsOpen = false;
        Startdate = new DateTime(Chartdate.Year, Chartdate.Month, 1);
        Enddate = Startdate.AddMonths(1);
    }

    private void DoEditPerson(Person p)
    {
        EditPerson = p;
        EditName = p.Name;
        EditBirthdate = p.Birthdate;
        EditPersonDialogIsOpen = true;
    }

    private void DoEdit()
    {
        EditPersonDialogIsOpen = false;
        if (!string.IsNullOrWhiteSpace(EditName)) EditPerson.Name = EditName;
        EditPerson.Birthdate = EditBirthdate;
        SortAndSave();
    }

    private void DoDeletePerson(Person p)
    {
        DeletePerson = p;
        DeletePersonDialogIsOpen = true;
    }

    private void DoDelete()
    {
        if (DeletePerson != null)
        {
            DeletePersonDialogIsOpen = false;
            People.Remove(DeletePerson);
            SortAndSave();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        People = await localStorage.GetItemAsync<List<Person>>("people");
        if (People == null)
        {
            People = new List<Person>
            {
                new Person { Name = "Brady", Birthdate = DateTime.Parse("8/23/1961", null, System.Globalization.DateTimeStyles.AssumeLocal) },
                new Person { Name = "Deena", Birthdate = DateTime.Parse("1/5/1963", null, System.Globalization.DateTimeStyles.AssumeLocal) },
                new Person { Name = "Emily", Birthdate = DateTime.Parse("2/12/2004", null, System.Globalization.DateTimeStyles.AssumeLocal) }
            };
            SortAndSave();
        }

        Startdate = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1, 0, 0, 0, DateTimeKind.Local);
        Enddate = Startdate.AddMonths(1);
    }

    public class Person
    {
        public string? Name { get; set; }
        private DateTime _birthdate;
        public DateTime Birthdate
        {
            get { return _birthdate.ToLocalTime(); }
            set { _birthdate = DateTime.SpecifyKind(value, DateTimeKind.Local); }
        }
    }
}