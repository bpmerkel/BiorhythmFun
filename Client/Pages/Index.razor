@page "/"
@using BiorhythmFun.Client
@using BiorhythmFun.Client.Shared

<MatAppBarContainer>
    <MatAppBar Fixed="true">
        <MatAppBarRow>
            <MatAppBarSection>
                <MatAppBarTitle>Biorhythm Fun</MatAppBarTitle>
            </MatAppBarSection>
            <MatAppBarSection Align="@MatAppBarSectionAlign.End">
                <MatIconButton title="Prepend Month" Icon="exit_to_app" OnClick="DoPrevious" Style="transform: rotate(180deg)" />
                <MatIconButton title="Change Plot Date" Icon="insert_invitation" OnClick="DoChangeChartDate" />
                <MatIconButton title="Append Month" Icon="exit_to_app" OnClick="DoNext" />
                <MatIconButton title="Read FAQ" Icon="import_contacts" OnClick="DoShowFAQ" />
            </MatAppBarSection>
        </MatAppBarRow>
    </MatAppBar>

    <MatAppBarContent Class="Content">
        <MatDialog IsOpen="@AddPersonDialogIsOpen">
            <MatDialogTitle>Add Person</MatDialogTitle>
            <MatDialogContent>
                <MatTextField @bind-Value="@AddName" Required="true" Label="Name" Style="display: block"></MatTextField>
                <MatDatePicker @bind-Value="@AddBirthdate" Required="true" Label="Birth Date"></MatDatePicker>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="DoAddPersonObject">OK</MatButton>
                <MatButton OnClick="@(e => { AddPersonDialogIsOpen = false; })">Cancel</MatButton>
            </MatDialogActions>
        </MatDialog>

        <MatDialog IsOpen="@EditPersonDialogIsOpen">
            <MatDialogTitle>Edit Chart</MatDialogTitle>
            <MatDialogContent>
                <MatTextField @bind-Value="@EditName" Required="true" Label="Name" Style="display: block"></MatTextField>
                <MatDatePicker @bind-Value="@EditBirthdate" Required="true" Label="Birth Date"></MatDatePicker>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="DoEditPersonObject">OK</MatButton>
                <MatButton OnClick="@(e => { EditPersonDialogIsOpen = false; })">Cancel</MatButton>
            </MatDialogActions>
        </MatDialog>

        <MatDialog IsOpen="@DeletePersonDialogIsOpen">
            <MatDialogTitle>Delete Chart</MatDialogTitle>
            <MatDialogContent>
                Are you sure you want to delete chart for '@DeletePerson?.Name'?
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="DoDeletePersonObject">OK</MatButton>
                <MatButton OnClick="@(e => { DeletePersonDialogIsOpen = false; })">Cancel</MatButton>
            </MatDialogActions>
        </MatDialog>

        <MatDialog IsOpen="@AddGroupDialogIsOpen">
            <MatDialogTitle>Add Group</MatDialogTitle>
            <MatDialogContent>
                <MatTextField @bind-Value="@AddName" Required="true" Label="Name" Style="display: block"></MatTextField>
                <MatList SingleSelection="false">
                    @foreach (var p in ChartSet.People)
                    {
                        <MatListItem>
                            <MatCheckbox @bind-Value="@ChartSet.GroupPeople[p.ID]" Label="@p.Name"></MatCheckbox>
                        </MatListItem>
                    }
                </MatList>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="DoAddGroupObject">OK</MatButton>
                <MatButton OnClick="@(e => { AddGroupDialogIsOpen = false; })">Cancel</MatButton>
            </MatDialogActions>
        </MatDialog>

        <MatDialog IsOpen="@EditGroupDialogIsOpen">
            <MatDialogTitle>Edit Group</MatDialogTitle>
            <MatDialogContent>
                <MatTextField @bind-Value="@EditName" Required="true" Label="Name" Style="display: block"></MatTextField>
                <MatList SingleSelection="false">
                    @foreach (var p in ChartSet.People)
                    {
                        <MatListItem>
                            <MatCheckbox @bind-Value="@ChartSet.GroupPeople[p.ID]" Label="@p.Name"></MatCheckbox>
                        </MatListItem>
                    }
                </MatList>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="EditGroupObject">OK</MatButton>
                <MatButton OnClick="@(e => { EditGroupDialogIsOpen = false; })">Cancel</MatButton>
            </MatDialogActions>
        </MatDialog>

        <MatDialog IsOpen="@DeleteGroupDialogIsOpen">
            <MatDialogTitle>Delete Group</MatDialogTitle>
            <MatDialogContent>
                Are you sure you want to delete group for '@DeleteGroup?.Name'?
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="DeleteGroupObject">OK</MatButton>
                <MatButton OnClick="@(e => { DeleteGroupDialogIsOpen = false; })">Cancel</MatButton>
            </MatDialogActions>
        </MatDialog>

        <MatDialog IsOpen="@AddCompatibilityChartDialogIsOpen">
            <MatDialogTitle>Add Compatibility Chart</MatDialogTitle>
            <MatDialogContent>
                <MatSelectItem @bind-Value="@AddPerson1" Items="@ChartSet.People" Label="Person 1" HelperText="Choose Person 1" FullWidth="true">
                    <ItemTemplate>
                        @context?.Name
                    </ItemTemplate>
                </MatSelectItem>
                <MatSelectItem @bind-Value="@AddPerson2" Items="@ChartSet.People" Label="Person 2" HelperText="Choose Person 2" FullWidth="true">
                    <ItemTemplate>
                        @context?.Name
                    </ItemTemplate>
                </MatSelectItem>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="AddCompatibilityObject">OK</MatButton>
                <MatButton OnClick="@(e => { AddCompatibilityChartDialogIsOpen = false; })">Cancel</MatButton>
            </MatDialogActions>
        </MatDialog>

        <MatDialog IsOpen="@EditCompatibilityDialogIsOpen">
            <MatDialogTitle>Edit Compatibility Chart</MatDialogTitle>
            <MatDialogContent>
                <MatSelectItem @bind-Value="@EditPerson1" Items="@ChartSet.People" Label="Person 1" HelperText="Choose Person 1" FullWidth="true">
                    <ItemTemplate>
                        @context?.Name
                    </ItemTemplate>
                </MatSelectItem>
                <MatSelectItem @bind-Value="@EditPerson2" Items="@ChartSet.People" Label="Person 2" HelperText="Choose Person 2" FullWidth="true">
                    <ItemTemplate>
                        @context?.Name
                    </ItemTemplate>
                </MatSelectItem>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="EditCompatibilityObject">OK</MatButton>
                <MatButton OnClick="@(e => { EditCompatibilityDialogIsOpen = false; })">Cancel</MatButton>
            </MatDialogActions>
        </MatDialog>

        <MatDialog IsOpen="@DeleteCompatibilityDialogIsOpen">
            <MatDialogTitle>Delete Compatibility Chart</MatDialogTitle>
            <MatDialogContent>
                Are you sure you want to delete Compatibility chart '@DeleteCompatibility?.Name'?
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="DeleteCompatibilityObject">OK</MatButton>
                <MatButton OnClick="@(e => { DeleteCompatibilityDialogIsOpen = false; })">Cancel</MatButton>
            </MatDialogActions>
        </MatDialog>

        <MatDialog IsOpen="@AddPredictionChartDialogIsOpen">
            <MatDialogTitle>Add Prediction Chart</MatDialogTitle>
            <MatDialogContent>
                <MatSelectItem @bind-Value="@AddMother" Items="@ChartSet.People" Label="Mother" HelperText="Choose the Mother" FullWidth="true">
                    <ItemTemplate>
                        @context?.Name
                    </ItemTemplate>
                </MatSelectItem>
                <MatDatePicker @bind-Value="@AddConceptionDate" Required="true" Label="Date of Conception"></MatDatePicker>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="AddPredictionObject">OK</MatButton>
                <MatButton OnClick="@(e => { AddPredictionChartDialogIsOpen = false; })">Cancel</MatButton>
            </MatDialogActions>
        </MatDialog>

        <MatDialog IsOpen="@EditPredictionDialogIsOpen">
            <MatDialogTitle>Edit Prediction Chart</MatDialogTitle>
            <MatDialogContent>
                <MatSelectItem @bind-Value="@EditMother" Items="@ChartSet.People" Label="Mother" HelperText="Choose the Mother" FullWidth="true">
                    <ItemTemplate>
                        @context?.Name
                    </ItemTemplate>
                </MatSelectItem>
                <MatDatePicker @bind-Value="@EditConceptionDate" Required="true" Label="Date of Conception"></MatDatePicker>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="EditPredictionObject">OK</MatButton>
                <MatButton OnClick="@(e => { EditPredictionDialogIsOpen = false; })">Cancel</MatButton>
            </MatDialogActions>
        </MatDialog>

        <MatDialog IsOpen="@DeletePredictionDialogIsOpen">
            <MatDialogTitle>Delete Prediction Chart</MatDialogTitle>
            <MatDialogContent>
                Are you sure you want to delete Prediction chart for '@DeletePrediction?.Name'?
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="DeletePredictionObject">OK</MatButton>
                <MatButton OnClick="@(e => { DeletePredictionDialogIsOpen = false; })">Cancel</MatButton>
            </MatDialogActions>
        </MatDialog>

        <MatDialog IsOpen="@ChangeChartdateDialogIsOpen">
            <MatDialogTitle>Change Chart Date</MatDialogTitle>
            <MatDialogContent>
                <MatDatePicker @bind-Value="@Chartdate" Required="true" Label="Chart Date"></MatDatePicker>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="DoChange">OK</MatButton>
                <MatButton OnClick="@(e => { ChangeChartdateDialogIsOpen = false; })">Cancel</MatButton>
            </MatDialogActions>
        </MatDialog>

        <MatDialog IsOpen="@FAQIsOpen" CanBeClosed="true" Class="FAQContainer">
            <MatDialogTitle>FAQ</MatDialogTitle>
            <MatDialogContent>
                <FAQStatic></FAQStatic>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="@(e => { FAQIsOpen = false; })">OK</MatButton>
            </MatDialogActions>
        </MatDialog>

        <MatListGroup>
            <MatListGroupSubHeader Class="TabGroupHeader">
                <MatIcon Icon="@MatIconNames.Person" /> People
                <span style="display: inline-block; transform: scale(.75); vertical-align: -3pt;">
                    <MatIconButton title="Add Person" Icon="add_circle" OnClick="DoAddPerson" />
                </span>
            </MatListGroupSubHeader>
            <MatList SingleSelection="true">
                @foreach (var person in ChartSet.People)
                {
                    <MatListItem Class="Person" OnClick="@(e => Current = person)">
                        @person.Name
                    </MatListItem>
                }
            </MatList>
            <MatListGroupSubHeader Class="TabGroupHeader">
                <MatIcon Icon="@MatIconNames.Group" /> Groups
                <span style="display: inline-block; transform: scale(.75); vertical-align: -3pt;">
                    <MatIconButton title="Add Group" Icon="add_circle" OnClick="DoAddGroup" />
                </span>
            </MatListGroupSubHeader>
            <MatList SingleSelection="true">
                @foreach (var group in ChartSet.Groups)
                {
                    <MatListItem Class="Group" OnClick="@(e => Current = group)">
                        @group.Name
                    </MatListItem>
                }
            </MatList>
            <MatListGroupSubHeader Class="TabGroupHeader">
                <MatIcon Icon="@MatIconNames.Compare" /> Compatibility
                <span style="display: inline-block; transform: scale(.75); vertical-align: -3pt;">
                    <MatIconButton title="Add Compatibility Chart" Icon="add_circle" OnClick="DoAddCompatibilityChart" />
                </span>
            </MatListGroupSubHeader>
            <MatList SingleSelection="true">
                @foreach (var compat in ChartSet.CompatibilityCharts)
                {
                    <MatListItem Class="Compatibility" OnClick="@(e => Current = compat)">
                        @compat.Name
                    </MatListItem>
                }
            </MatList>
            <MatListGroupSubHeader Class="TabGroupHeader">
                <MatIcon Icon="@MatIconNames.Pregnant_woman" /> Prediction
                <span style="display: inline-block; transform: scale(.75); vertical-align: -3pt;">
                    <MatIconButton title="Add Prediction Chart" Icon="add_circle" OnClick="DoAddPredictionChart" />
                </span>
            </MatListGroupSubHeader>
            <MatList SingleSelection="true">
                @foreach (var predict in ChartSet.PredictionCharts)
                {
                    <MatListItem Class="Prediction" OnClick="@(e => Current = predict)">
                        @predict.Name
                    </MatListItem>
                }
            </MatList>
        </MatListGroup>

        <div class="ChartContainer ChartFull">
            @if (Current is Person person)
            {
                <div>
                    <span style="display: inline-block; width: 200px">
                        @person.Name
                    </span>
                    <span style="display: inline-block; width: 300px">
                        @($"Born {person.Birthdate:dddd MMMM dd, yyyy}")
                    </span>
                    <span style="display: inline-block; transform: scale(.75)">
                        <MatIconButton title="Edit" Icon="edit" OnClick="@(e => DoEditPerson(person))" />
                        <MatIconButton title="Delete" Icon="delete" OnClick="@(e => DoDeletePerson(person))" />
                    </span>
                </div>
                <ChartBuilder Birthdate="@person.Birthdate" Startdate="@Startdate" Enddate="@Enddate" Height="200" />
            }
            else if (Current is Group group)
            {
                <div>
                    <span style="display: inline-block; width: 200px">
                        Group @group.Name
                    </span>
                    <span style="display: inline-block; transform: scale(.75)">
                        <MatIconButton title="Edit" Icon="edit" OnClick="@(e => DoEditGroup(group))" />
                        <MatIconButton title="Delete" Icon="delete" OnClick="@(e => DoDeleteGroup(group))" />
                    </span>
                </div>
                @foreach (var p in group.IDs.Select(id => ChartSet.GetPerson(id)))
                {
                    <div>
                        <span style="display: inline-block; width: 200px">
                            @p.Name
                        </span>
                        <span style="display: inline-block; width: 300px">
                            @($"Born {p.Birthdate:dddd MMMM dd, yyyy}")
                        </span>
                    </div>
                    <ChartBuilder Birthdate="@p.Birthdate" Startdate="@Startdate" Enddate="@Enddate" Height="200" />
                }
            }
            else if (Current is Prediction prediction)
            {
                var mother = ChartSet.GetPerson(prediction.MotherID);
                var startdate1 = prediction.ConceptionDate.AddDays(-prediction.ConceptionDate.Day + 1);
                var enddate1 = startdate1.AddMonths(1).AddDays(-1);
                var gestation = prediction.ConceptionDate.AddDays(280);
                var startdate2 = gestation.AddDays(-gestation.Day + 1);
                var enddate2 = startdate2.AddMonths(1).AddDays(-1);
                <div>
                    <span style="display: inline-block; width: 200px">
                        @prediction.Name
                    </span>
                    <span style="display: inline-block; transform: scale(.75)">
                        <MatIconButton title="Edit" Icon="edit" OnClick="@(e => DoEditPrediction(prediction))" />
                        <MatIconButton title="Delete" Icon="delete" OnClick="@(e => DoDeletePrediction(prediction))" />
                    </span>
                </div>
                <div>
                    Baby's gender prediction for mother @mother.Name, with birth date @($"{mother.Birthdate:dddd MMMM dd, yyyy}"),
                    concieved around @($"{prediction.ConceptionDate:dddd MMMM dd, yyyy}").
                    Biorhythm science indicates the mother's body chemistry at conception influences the acceptance of an X or Y chromosome to determine the child as female or male.
                    When a mother's biorhythm cycles are high in Emotional and low in Physical, then a girl (X chromosome) is likely.
                    When high in Physical and low in Emotional, then a boy (Y chromosome) is likely.
                </div>
                <div>
                    <ChartBuilder Birthdate="@mother.Birthdate" Startdate="@startdate1" Enddate="@enddate1" Highlitedate="@prediction.ConceptionDate" Height="200" Type="@ChartBuilder.ChartType.GenderPrediction" />
                </div>
                <div>
                    Baby's birth date prediction for mother @mother.Name, with baby's birth date around @($"{gestation:dddd MMMM dd, yyyy}").
                    Biorhythm science indicates that baby's are born on or near the mother's critical day--so look for a critical day near the 280-day gestation duration after conception.
                </div>
                <div>
                    <ChartBuilder Birthdate="@mother.Birthdate" Startdate="@startdate2" Enddate="@enddate2" Highlitedate="@gestation" Height="200" Type="@ChartBuilder.ChartType.BirthdatePrediction" />
                </div>
            }
            else if (Current is Compatibility compat)
            {
                var p1 = ChartSet.GetPerson(compat.ID1);
                var p2 = ChartSet.GetPerson(compat.ID2);
                <div>
                    <span style="display: inline-block; width: 200px">
                        @compat.Name
                    </span>
                    <span style="display: inline-block; transform: scale(.75)">
                        <MatIconButton title="Edit" Icon="edit" OnClick="@(e => DoEditCompatibility(compat))" />
                        <MatIconButton title="Delete" Icon="delete" OnClick="@(e => DoDeleteCompatibility(compat))" />
                    </span>
                </div>
                <div>
                    <CompatibilityChartBuilder Birthdate1="@p1.Birthdate" Birthdate2="@p2.Birthdate" Height="200" Width="700" />
                </div>
            }
        </div>
    </MatAppBarContent>
</MatAppBarContainer>