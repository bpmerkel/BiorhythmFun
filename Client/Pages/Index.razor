@page "/"
@using BiorhythmFun.Client
@using BiorhythmFun.Client.Model
@using Blazored.LocalStorage
@using System.Web
@inject ISnackbar Snackbar

<MudDialog IsVisible="@AddPersonDialogIsVisible">
    <TitleContent>Add Person</TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="@AddName" Required="true" Label="Name" />
        <MudDatePicker @bind-Date="@AddBirthdate" Required="true" Label="Birth Date" Editable="true" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="DoAddPersonObject">OK</MudButton>
        <MudButton OnClick="@(e => { AddPersonDialogIsVisible = false; })">Cancel</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog IsVisible="@EditPersonDialogIsVisible">
    <TitleContent>Edit Chart</TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="@EditName" Required="true" Label="Name" />
        <MudDatePicker @bind-Date="@EditBirthdate" Required="true" Label="Birth Date" Editable="true" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="DoEditPersonObject">OK</MudButton>
        <MudButton OnClick="@(e => { EditPersonDialogIsVisible = false; })">Cancel</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog IsVisible="@DeletePersonDialogIsVisible">
    <TitleContent>Delete Chart</TitleContent>
    <DialogContent>
        Are you sure you want to delete chart for '@DeletePerson?.Name'?
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="DoDeletePersonObject">OK</MudButton>
        <MudButton OnClick="@(e => { DeletePersonDialogIsVisible = false; })">Cancel</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog IsVisible="@AddGroupDialogIsVisible">
    <TitleContent>Add Group</TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="@AddName" Required="true" Label="Name" />
        <MudList>
            @foreach (var p in ChartSet.People)
            {
                <MudListItem Class="pt-0 pb-0">
                    <MudCheckBox @bind-Checked="@(ChartSet.GroupPeople[p.ID])" Class="pt-0 pb-0">@p.Name</MudCheckBox>
                </MudListItem>
            }
        </MudList>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="DoAddGroupObject">OK</MudButton>
        <MudButton OnClick="@(e => { AddGroupDialogIsVisible = false; })">Cancel</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog IsVisible="@EditGroupDialogIsVisible">
    <TitleContent>Edit Group</TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="@EditName" Required="true" Label="Name" />
        <MudList>
            @foreach (var p in ChartSet.People)
            {
                <MudListItem Class="pt-0 pb-0">
                    <MudCheckBox @bind-Checked="@(ChartSet.GroupPeople[p.ID])" Class="pt-0 pb-0">@p.Name</MudCheckBox>
                </MudListItem>
            }
        </MudList>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="EditGroupObject">OK</MudButton>
        <MudButton OnClick="@(e => { EditGroupDialogIsVisible = false; })">Cancel</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog IsVisible="@DeleteGroupDialogIsVisible">
    <TitleContent>Delete Group</TitleContent>
    <DialogContent>
        Are you sure you want to delete group for '@DeleteGroup?.Name'?
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="DeleteGroupObject">OK</MudButton>
        <MudButton OnClick="@(e => { DeleteGroupDialogIsVisible = false; })">Cancel</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog IsVisible="@AddCompatibilityChartDialogIsVisible">
    <TitleContent>Add Compatibility Chart</TitleContent>
    <DialogContent>
        <MudSelect T="Person" Label="Person 1" @bind-Value="AddPerson1" AnchorOrigin="Origin.BottomCenter">
            @foreach (var item in ChartSet.People)
            {
                <MudSelectItem Value="@item">@item.Name</MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="Person" Label="Person 2" @bind-Value="AddPerson2" AnchorOrigin="Origin.BottomCenter">
            @foreach (var item in ChartSet.People)
            {
                <MudSelectItem Value="@item">@item.Name</MudSelectItem>
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="AddCompatibilityObject">OK</MudButton>
        <MudButton OnClick="@(e => { AddCompatibilityChartDialogIsVisible = false; })">Cancel</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog IsVisible="@EditCompatibilityDialogIsVisible">
    <TitleContent>Edit Compatibility Chart</TitleContent>
    <DialogContent>
        <MudSelect T="Person" Label="Person 1" @bind-Value="EditPerson1" AnchorOrigin="Origin.BottomCenter">
            @foreach (var item in ChartSet.People)
            {
                <MudSelectItem Value="@item">@item.Name</MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="Person" Label="Person 2" @bind-Value="EditPerson2" AnchorOrigin="Origin.BottomCenter">
            @foreach (var item in ChartSet.People)
            {
                <MudSelectItem Value="@item">@item.Name</MudSelectItem>
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="EditCompatibilityObject">OK</MudButton>
        <MudButton OnClick="@(e => { EditCompatibilityDialogIsVisible = false; })">Cancel</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog IsVisible="@DeleteCompatibilityDialogIsVisible">
    <TitleContent>Delete Compatibility Chart</TitleContent>
    <DialogContent>
        Are you sure you want to delete Compatibility chart '@DeleteCompatibility?.Name'?
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="DeleteCompatibilityObject">OK</MudButton>
        <MudButton OnClick="@(e => { DeleteCompatibilityDialogIsVisible = false; })">Cancel</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog IsVisible="@AddPredictionChartDialogIsVisible">
    <TitleContent>Add Prediction Chart</TitleContent>
    <DialogContent>
        <MudSelect T="Person" Label="Mother" @bind-Value="AddMother" AnchorOrigin="Origin.BottomCenter">
            @foreach (var item in ChartSet.People)
            {
                <MudSelectItem Value="@item">@item.Name</MudSelectItem>
            }
        </MudSelect>
        <MudDatePicker Date="@AddConceptionDate" Required="true" Label="Date of Conception" Editable="true" DateChanged="PredictionConceptionDateChanged" />
        <MudText>- or -</MudText>
        <MudDatePicker Date="@AddConceptionBirthDate" Required="true" Label="Date of Birth" Editable="true" DateChanged="PredictionConceptionBirthDateChanged" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="AddPredictionObject">OK</MudButton>
        <MudButton OnClick="@(e => { AddPredictionChartDialogIsVisible = false; })">Cancel</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog IsVisible="@EditPredictionDialogIsVisible">
    <TitleContent>Edit Prediction Chart</TitleContent>
    <DialogContent>
        <MudSelect T="Person" Label="Mother" @bind-Value="EditMother" AnchorOrigin="Origin.BottomCenter">
            @foreach (var item in ChartSet.People)
            {
                <MudSelectItem Value="@item">@item.Name</MudSelectItem>
            }
        </MudSelect>
        <MudDatePicker Date="@EditConceptionDate" Required="true" Label="Date of Conception" Editable="true" DateChanged="PredictionConceptionDateChanged" />
        <MudText>- or -</MudText>
        <MudDatePicker Date="@EditConceptionBirthDate" Required="true" Label="Date of Birth" Editable="true" DateChanged="PredictionConceptionBirthDateChanged" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="EditPredictionObject">OK</MudButton>
        <MudButton OnClick="@(e => { EditPredictionDialogIsVisible = false; })">Cancel</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog IsVisible="@DeletePredictionDialogIsVisible">
    <TitleContent>Delete Prediction Chart</TitleContent>
    <DialogContent>
        Are you sure you want to delete Prediction chart for '@DeletePrediction?.Name'?
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="DeletePredictionObject">OK</MudButton>
        <MudButton OnClick="@(e => { DeletePredictionDialogIsVisible = false; })">Cancel</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog IsVisible="@ChangeChartdateDialogIsVisible">
    <TitleContent>Change Chart Date</TitleContent>
    <DialogContent>
        <MudDatePicker @bind-Date="Chartdate" Required="true" Label="Chart Date" Editable="true" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="DoChange">OK</MudButton>
        <MudButton OnClick="@(e => { ChangeChartdateDialogIsVisible = false; })">Cancel</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog IsVisible="@FAQIsVisible">
    <TitleContent>FAQ</TitleContent>
    <DialogContent>
        <FAQStatic />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(e => { FAQIsVisible = false; })">OK</MudButton>
    </DialogActions>
</MudDialog>

<MudAppBar Color="Color.Primary" Fixed="false" Dense="true">
    <MudText>Biorhythm Fun</MudText>
    <MudSpacer />
    <MudIconButton Title="Prepend Month" Icon="@Icons.Material.Filled.FastRewind" Color="Color.Warning" Edge="Edge.End" OnClick="DoPrevious" />
    <MudIconButton Title="Change Plot Date" Icon="@Icons.Material.Filled.EditCalendar" Color="Color.Warning" Edge="Edge.End" OnClick="DoChangeChartDate" OpenTo="OpenTo.Month" />
    <MudIconButton Title="Append Month" Icon="@Icons.Material.Filled.FastForward" Color="Color.Warning" Edge="Edge.End" OnClick="DoNext" />
    <MudIconButton Title="Read FAQ" Icon="@Icons.Material.Filled.Help" Color="Color.Warning" Edge="Edge.End" OnClick="DoShowFAQ" />
</MudAppBar>

<MudLayout>
    <MudDrawer Open="true">
        <MudNavMenu>
            <MudNavGroup Title="People" Icon="@Icons.Material.Filled.Person" IconColor="Color.Primary" Expanded="true" HideExpandIcon="true">
                @foreach (var person in ChartSet.People)
                {
                    <MudNavLink OnClick="@(e => Current = person)">@person.Name</MudNavLink>
                }
                <MudNavLink Icon="@Icons.Material.Filled.PersonAdd" IconColor="Color.Success" OnClick="DoAddPerson">Add Person</MudNavLink>
            </MudNavGroup>
            <MudNavGroup Title="Group" Icon="@Icons.Material.Filled.Groups" IconColor="Color.Primary" Expanded="true" HideExpandIcon="true">
                @foreach (var group in ChartSet.Groups)
                {
                    <MudNavLink OnClick="@(e => Current = group)">@group.Name</MudNavLink>
                }
                <MudNavLink Icon="@Icons.Material.Filled.GroupAdd" IconColor="Color.Success" OnClick="DoAddGroup">Add Group</MudNavLink>
            </MudNavGroup>
            <MudNavGroup Title="Compatibility" Icon="@Icons.Material.Filled.Compare" IconColor="Color.Primary" Expanded="true" HideExpandIcon="true">
                @foreach (var compat in ChartSet.CompatibilityCharts)
                {
                    <MudNavLink OnClick="@(e => Current = compat)">@compat.Name</MudNavLink>
                }
                <MudNavLink Icon="@Icons.Material.Filled.AddChart" IconColor="Color.Success" OnClick="DoAddCompatibilityChart">Add Compatibility Chart</MudNavLink>
            </MudNavGroup>
            <MudNavGroup Title="Prediction" Icon="@Icons.Material.Filled.PregnantWoman" IconColor="Color.Primary" Expanded="true" HideExpandIcon="true">
                @foreach (var predict in ChartSet.PredictionCharts)
                {
                    <MudNavLink OnClick="@(e => Current = predict)">@predict.Name</MudNavLink>
                }
                <MudNavLink Icon="@Icons.Material.Filled.AddReaction" IconColor="Color.Success" OnClick="DoAddPredictionChart">Add Prediction Chart</MudNavLink>
            </MudNavGroup>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent Class="pt-0">
        @if (Current is Person person)
        {
            <MudCard>
                <MudCardHeader Class="pb-0">
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@person.Name</MudText>
                        <MudSpacer />
                        <MudText GutterBottom="false">@($"Born {person.Birthdate:dddd MMMM dd, yyyy}")</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" aria-label="edit" OnClick="@(e => DoEditPerson(person))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Primary" aria-label="delete" OnClick="@(e => DoDeletePerson(person))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Share" Color="Color.Primary" aria-label="share" OnClick="@(e => DoShare(person))" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Class="pt-0">
                    <ChartBuilder Birthdate="@person.Birthdate" Startdate="@Startdate" Enddate="@Enddate" Height="200" />
                </MudCardContent>
            </MudCard>
        }
        else if (Current is Group group)
        {
            <MudCard>
                <MudCardHeader Class="pb-0">
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@group.Name</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" aria-label="edit" OnClick="@(e => DoEditGroup(group))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Primary" aria-label="delete" OnClick="@(e => DoDeleteGroup(group))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Share" Color="Color.Primary" aria-label="share" OnClick="@(e => DoShare(group))" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Class="pt-0 pb-0">
                    @foreach (var p in group.IDs.Select(id => ChartSet.GetPerson(id)))
                    {
                        <MudCard Class="pl-0 pt-0">
                            <MudCardHeader Class="pl-0 pt-0 pb-0">
                                <CardHeaderContent>
                                    <MudText GutterBottom="false">@p.Name</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                                <MudCardContent Class="pl-0 pt-0 pb-0">
                                <ChartBuilder Birthdate="@p.Birthdate" Startdate="@Startdate" Enddate="@Enddate" Height="200" />
                            </MudCardContent>
                        </MudCard>
                    }
                </MudCardContent>
            </MudCard>
        }
        else if (Current is Prediction prediction)
        {
            var mother = ChartSet.GetPerson(prediction.MotherID);
            var startdate1 = prediction.ConceptionDate.AddDays(-prediction.ConceptionDate.Day + 1);
            var enddate1 = startdate1.AddMonths(1).AddDays(-1);
            var gestation = prediction.ConceptionDate.AddDays(280);
            var startdate2 = gestation.AddDays(-gestation.Day + 1);
            var enddate2 = startdate2.AddMonths(1).AddDays(-1);
            <MudCard>
                <MudCardHeader Class="pb-0">
                    <CardHeaderContent>
                    <MudText Typo="Typo.h6">@prediction.Name</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" aria-label="edit" OnClick="@(e => DoEditPrediction(prediction))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Primary" aria-label="delete" OnClick="@(e => DoDeletePrediction(prediction))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Share" Color="Color.Primary" aria-label="share" OnClick="@(e => DoShare(prediction))" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Class="pt-0">
                    <MudText>
                        Baby's gender prediction for mother @mother.Name, with birth date @($"{mother.Birthdate:dddd MMMM dd, yyyy}"),
                        concieved around @($"{prediction.ConceptionDate:dddd MMMM dd, yyyy}").
                        Biorhythm science indicates the mother's body chemistry at conception influences the acceptance of an X or Y chromosome to determine the child as female or male.
                        When a mother's biorhythm cycles are high in Emotional and low in Physical, then a girl (X chromosome) is likely.
                        When high in Physical and low in Emotional, then a boy (Y chromosome) is likely.
                    </MudText>
                    <ChartBuilder Birthdate="@mother.Birthdate" Startdate="@startdate1" Enddate="@enddate1" Highlitedate="@prediction.ConceptionDate" Height="200" Type="@ChartBuilder.ChartType.GenderPrediction" />
                    <MudText>
                        Baby's birth date prediction for mother @mother.Name, with baby's birth date around @($"{gestation:dddd MMMM dd, yyyy}").
                        Biorhythm science indicates that baby's are born on or near the mother's critical day--so look for a critical day near the 280-day gestation after conception.
                    </MudText>
                    <ChartBuilder Birthdate="@mother.Birthdate" Startdate="@startdate2" Enddate="@enddate2" Highlitedate="@gestation" Height="200" Type="@ChartBuilder.ChartType.BirthdatePrediction" />
                </MudCardContent>
            </MudCard>
        }
        else if (Current is Compatibility compat)
        {
            var p1 = ChartSet.GetPerson(compat.ID1);
            var p2 = ChartSet.GetPerson(compat.ID2);
            <MudCard>
                <MudCardHeader Class="pb-0">
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@compat.Name</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" aria-label="edit" OnClick="@(e => DoEditCompatibility(compat))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Primary" aria-label="delete" OnClick="@(e => DoDeleteCompatibility(compat))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Share" Color="Color.Primary" aria-label="share" OnClick="@(e => DoShare(compat))" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Class="pt-0">
                    <CompatibilityChartBuilder Birthdate1="@p1.Birthdate" Birthdate2="@p2.Birthdate" Height="200" Width="700" />
                </MudCardContent>
            </MudCard>
        }
    </MudMainContent>
</MudLayout>

@code
{
    [Inject] public ILocalStorageService LocalStorage { get; set; }
    [Inject] public IJSRuntime JsRuntime { get; set; }
    [Inject] public NavigationManager NavManager { get; set; }
    public Set ChartSet { get; init; } = new();

    private ChartableBase Current = default!;

    private bool FAQIsVisible = false;
    private bool AddPersonDialogIsVisible = false;
    private bool EditPersonDialogIsVisible = false;
    private bool DeletePersonDialogIsVisible = false;
    private string AddName = string.Empty;
    private DateTime? AddBirthdate = DateTime.Today;
    private Person DeletePerson;
    private Person EditPerson;
    private string EditName = string.Empty;
    private DateTime? EditBirthdate = DateTime.Today;

    private bool AddGroupDialogIsVisible = false;
    private bool DeleteGroupDialogIsVisible = false;
    private bool EditGroupDialogIsVisible = false;
    private Group DeleteGroup;
    private Group EditGroup;

    private bool AddCompatibilityChartDialogIsVisible = false;
    private bool EditCompatibilityDialogIsVisible = false;
    private bool DeleteCompatibilityDialogIsVisible = false;
    private Person AddPerson1;
    private Person AddPerson2;
    private Compatibility DeleteCompatibility;
    private Compatibility EditCompatibility;
    private Person EditPerson1;
    private Person EditPerson2;

    private bool AddPredictionChartDialogIsVisible = false;
    private bool EditPredictionDialogIsVisible = false;
    private bool DeletePredictionDialogIsVisible = false;
    private Person AddMother;
    private Prediction DeletePrediction;
    private Prediction EditPrediction;
    private Person EditMother;
    private DateTime? AddConceptionDate = DateTime.Today;
    private DateTime? EditConceptionDate = DateTime.Today;
    private DateTime? AddConceptionBirthDate = DateTime.Today;
    private DateTime? EditConceptionBirthDate = DateTime.Today;
    private DateTime? Chartdate;

    private bool ChangeChartdateDialogIsVisible = false;

    private DateTime Startdate;
    private DateTime Enddate;

    public void DoShowFAQ(MouseEventArgs e) => FAQIsVisible = !FAQIsVisible;

    private void DoAddPerson(MouseEventArgs e)
    {
        AddName = string.Empty;
        AddBirthdate = DateTime.Today;
        AddPersonDialogIsVisible = true;
    }

    private void DoAddPersonObject(MouseEventArgs e)
    {
        AddPersonDialogIsVisible = false;
        // save Name and Birthdate to localStorage
        if (!string.IsNullOrWhiteSpace(AddName))
        {
            var p = new Person(AddName, AddBirthdate.Value);
            ChartSet.AddPerson(p);
            Current = p;
        }
    }

    private void DoEditPerson(Person p)
    {
        if (p != null)
        {
            EditPerson = p;
            EditName = p.Name;
            EditBirthdate = p.Birthdate;
            EditPersonDialogIsVisible = true;
        }
    }

    private void DoEditPersonObject()
    {
        if (EditPerson != null)
        {
            EditPersonDialogIsVisible = false;
            if (!string.IsNullOrWhiteSpace(EditName)) EditPerson.Name = EditName;
            EditPerson.Birthdate = EditBirthdate.Value;
            ChartSet.Save();
        }
    }

    private void DoDeletePerson(Person p)
    {
        DeletePerson = p;
        DeletePersonDialogIsVisible = true;
    }

    private void DoDeletePersonObject()
    {
        if (DeletePerson != null)
        {
            DeletePersonDialogIsVisible = false;
            ChartSet.RemovePerson(DeletePerson);
            Current = ChartSet.People.First();
        }
    }

    private void DoAddGroup(MouseEventArgs e)
    {
        AddName = string.Empty;
        AddGroupDialogIsVisible = true;
    }

    private void DoAddGroupObject(MouseEventArgs e)
    {
        if (!string.IsNullOrWhiteSpace(AddName))
        {
            AddGroupDialogIsVisible = false;
            ChartSet.AddGroup(AddName, ChartSet.GroupPeople.Where(kvp => kvp.Value).Select(kvp => kvp.Key).ToList());
        }
    }

    private void DoEditGroup(Group group)
    {
        if (group != null)
        {
            EditGroup = group;
            EditName = group.Name;
            foreach (var g in ChartSet.GroupPeople)
            {
                ChartSet.GroupPeople[g.Key] = false;
            }
            foreach (var g in group.IDs)
            {
                ChartSet.GroupPeople[g] = true;
            }
            EditGroupDialogIsVisible = true;
        }
    }

    private void EditGroupObject()
    {
        if (EditGroup != null)
        {
            EditGroupDialogIsVisible = false;
            if (!string.IsNullOrWhiteSpace(EditName)) EditGroup.Name = EditName;
            EditGroup.IDs.Clear();
            foreach (var kvp in ChartSet.GroupPeople)
            {
                if (kvp.Value) EditGroup.IDs.Add(kvp.Key);
            }
            ChartSet.Save();
        }
    }

    private void DoDeleteGroup(Group group)
    {
        DeleteGroup = group;
        DeleteGroupDialogIsVisible = true;
    }

    private void DeleteGroupObject()
    {
        if (DeleteGroup != null)
        {
            DeleteGroupDialogIsVisible = false;
            ChartSet.RemoveGroup(DeleteGroup);
            Current = ChartSet.People.First();
        }
    }

    private void DoAddCompatibilityChart(MouseEventArgs e)
    {
        AddPerson1 = null;
        AddPerson2 = null;
        AddCompatibilityChartDialogIsVisible = true;
    }

    private void AddCompatibilityObject(MouseEventArgs e)
    {
        AddCompatibilityChartDialogIsVisible = false;
        if (AddPerson1 != null && AddPerson2 != null)
        {
            ChartSet.AddCompatibilityChart(AddPerson1.ID, AddPerson2.ID);
        }
    }

    private void DoEditCompatibility(Compatibility compat)
    {
        if (compat != null)
        {
            EditCompatibility = compat;
            EditPerson1 = ChartSet.GetPerson(compat.ID1);
            EditPerson2 = ChartSet.GetPerson(compat.ID2);
            EditCompatibilityDialogIsVisible = true;
        }
    }

    private void EditCompatibilityObject()
    {
        if (EditCompatibility != null && EditPerson1 != null && EditPerson2 != null)
        {
            EditCompatibility.ID1 = EditPerson1.ID;
            EditCompatibility.ID2 = EditPerson2.ID;
            EditCompatibility.Name = $"{EditPerson1.Name} - {EditPerson2.Name}";
            EditCompatibilityDialogIsVisible = false;
            ChartSet.Save();
        }
    }

    private void DoDeleteCompatibility(Compatibility compat)
    {
        DeleteCompatibility = compat;
        DeleteCompatibilityDialogIsVisible = true;
    }

    private void DeleteCompatibilityObject(MouseEventArgs e)
    {
        if (DeleteCompatibility != null)
        {
            DeleteCompatibilityDialogIsVisible = false;
            ChartSet.RemoveCompatibility(DeleteCompatibility);
            Current = ChartSet.People.First();
        }
    }

    private void PredictionConceptionDateChanged(DateTime? e)
    {
        AddConceptionDate = EditConceptionDate = e.Value;
        AddConceptionBirthDate = EditConceptionBirthDate = e.Value.AddDays(280);    // birth date is 280 days after conception
        StateHasChanged();
    }

    private void PredictionConceptionBirthDateChanged(DateTime? e)
    {
        AddConceptionBirthDate = EditConceptionBirthDate = e.Value;
        AddConceptionDate = EditConceptionDate = e.Value.AddDays(-280);    // conception date is 280 days before birth
        StateHasChanged();
    }

    private void DoAddPredictionChart(MouseEventArgs e)
    {
        AddMother = null;
        AddConceptionDate = DateTime.Today;
        AddConceptionBirthDate = DateTime.Today.AddDays(280);
        AddPredictionChartDialogIsVisible = true;
    }

    private void AddPredictionObject(MouseEventArgs e)
    {
        AddPredictionChartDialogIsVisible = false;
        if (AddMother != null)
        {
            ChartSet.AddPredictionChart(AddMother.ID, AddConceptionDate.Value);
        }
    }

    private void DoEditPrediction(Prediction prediction)
    {
        if (prediction != null)
        {
            EditPrediction = prediction;
            EditConceptionDate = prediction.ConceptionDate;
            EditConceptionBirthDate = prediction.ConceptionDate.AddDays(280);
            EditMother = ChartSet.GetPerson(prediction.MotherID);
            EditPredictionDialogIsVisible = true;
        }
    }

    private void EditPredictionObject(MouseEventArgs e)
    {
        if (EditPrediction != null && EditMother != null)
        {
            EditPrediction.MotherID = EditMother.ID;
            EditPrediction.ConceptionDate = EditConceptionDate.Value;
            EditPrediction.Name = $"{EditMother.Name} Prediction";
            EditPredictionDialogIsVisible = false;
            ChartSet.Save();
        }
    }

    private void DoDeletePrediction(Prediction prediction)
    {
        DeletePrediction = prediction;
        DeletePredictionDialogIsVisible = true;
    }

    private void DeletePredictionObject(MouseEventArgs e)
    {
        if (DeletePrediction != null)
        {
            DeletePredictionDialogIsVisible = false;
            ChartSet.RemovePrediction(DeletePrediction);
            Current = ChartSet.People.First();
        }
    }

    private async void DoShare(ChartableBase chart)
    {
        // copy the link to the chart to the clipboard
        var URL = $"{NavManager.Uri}?";

        switch (chart)
        {
            case Person p:
                {
                    URL += $"t=p&n={p.Name}&b={p.Birthdate:yyyy-MM-dd}";
                    break;
                }
            case Group g:
                {
                    URL += $"t=g&n={g.Name}&s={g.IDs.Count}&";
                    // add each member Person
                    URL += string.Join("&", g.IDs
                        .Select((id, i) =>
                        {
                            var p = ChartSet.GetPerson(id);
                            return $"p{i + 1}={p.Name}&b{i + 1}={p.Birthdate:yyyy-MM-dd}";
                        }));
                    break;
                }
            case Compatibility c:
                {
                    var p1 = ChartSet.GetPerson(c.ID1);
                    var p2 = ChartSet.GetPerson(c.ID2);
                    URL += $"t=c&p1={p1.Name}&p2={p2.Name}&b1={p1.Birthdate:yyyy-MM-dd}&b2={p2.Birthdate:yyyy-MM-dd}";
                    break;
                }
            case Prediction m:
                {
                    var mother = ChartSet.GetPerson(m.MotherID);
                    URL += $"t=m&c={m.ConceptionDate:yyyy-MM-dd}&m={mother.Name}&b={mother.Birthdate:yyyy-MM-dd}";
                    break;
                }
        }

        await CopyTextToClipboard(URL);
        Snackbar.Add("Address copied to clipboard", Severity.Normal);
    }

    private async Task CopyTextToClipboard(string text)
    {
        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }

    private void DoPrevious(MouseEventArgs e) => Startdate = Startdate.AddMonths(-1);

    private void DoNext(MouseEventArgs e) => Enddate = Enddate.AddMonths(1);

    private void DoChangeChartDate(MouseEventArgs e)
    {
        Chartdate = Startdate;
        ChangeChartdateDialogIsVisible = true;
    }

    private void DoChange(MouseEventArgs e)
    {
        ChangeChartdateDialogIsVisible = false;
        Startdate = new DateTime(Chartdate.Value.Year, Chartdate.Value.Month, 1);
        Enddate = Startdate.AddMonths(1);
    }

    protected override async Task OnInitializedAsync()
    {
        Startdate = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1, 0, 0, 0, DateTimeKind.Local);
        Enddate = Startdate.AddMonths(1);
        //var qs = new Uri(NavManager.Uri).GetComponents(UriComponents.Query, UriFormat.Unescaped);
        var nvc = HttpUtility.ParseQueryString(new Uri(NavManager.Uri).Query);
        var qd = nvc.AllKeys.ToDictionary(k => k, k => nvc[k]);
        Current = await ChartSet.Load(LocalStorage, qd);
    }
}